/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface MulticallInterface extends utils.Interface {
  functions: {
    "aggregate((address,bytes)[])": FunctionFragment;
    "getEthBalance(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "aggregate"
      | "aggregate((address,bytes)[])"
      | "getEthBalance"
      | "getEthBalance(address)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "aggregate",
    values: [
      { target: PromiseOrValue<string>; callData: PromiseOrValue<BytesLike> }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "aggregate((address,bytes)[])",
    values: [
      { target: PromiseOrValue<string>; callData: PromiseOrValue<BytesLike> }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getEthBalance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEthBalance(address)",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "aggregate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "aggregate((address,bytes)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEthBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEthBalance(address)",
    data: BytesLike
  ): Result;

  events: {};
}

export interface Multicall extends BaseContract {
  contractName: "Multicall";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MulticallInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    aggregate(
      calls: {
        target: PromiseOrValue<string>;
        callData: PromiseOrValue<BytesLike>;
      }[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string[]] & { blockNumber: BigNumber; returnData: string[] }
    >;

    "aggregate((address,bytes)[])"(
      calls: {
        target: PromiseOrValue<string>;
        callData: PromiseOrValue<BytesLike>;
      }[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string[]] & { blockNumber: BigNumber; returnData: string[] }
    >;

    getEthBalance(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    "getEthBalance(address)"(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;
  };

  aggregate(
    calls: {
      target: PromiseOrValue<string>;
      callData: PromiseOrValue<BytesLike>;
    }[],
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string[]] & { blockNumber: BigNumber; returnData: string[] }
  >;

  "aggregate((address,bytes)[])"(
    calls: {
      target: PromiseOrValue<string>;
      callData: PromiseOrValue<BytesLike>;
    }[],
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string[]] & { blockNumber: BigNumber; returnData: string[] }
  >;

  getEthBalance(
    addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getEthBalance(address)"(
    addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    aggregate(
      calls: {
        target: PromiseOrValue<string>;
        callData: PromiseOrValue<BytesLike>;
      }[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string[]] & { blockNumber: BigNumber; returnData: string[] }
    >;

    "aggregate((address,bytes)[])"(
      calls: {
        target: PromiseOrValue<string>;
        callData: PromiseOrValue<BytesLike>;
      }[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string[]] & { blockNumber: BigNumber; returnData: string[] }
    >;

    getEthBalance(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getEthBalance(address)"(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    aggregate(
      calls: {
        target: PromiseOrValue<string>;
        callData: PromiseOrValue<BytesLike>;
      }[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "aggregate((address,bytes)[])"(
      calls: {
        target: PromiseOrValue<string>;
        callData: PromiseOrValue<BytesLike>;
      }[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEthBalance(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getEthBalance(address)"(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    aggregate(
      calls: {
        target: PromiseOrValue<string>;
        callData: PromiseOrValue<BytesLike>;
      }[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "aggregate((address,bytes)[])"(
      calls: {
        target: PromiseOrValue<string>;
        callData: PromiseOrValue<BytesLike>;
      }[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEthBalance(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getEthBalance(address)"(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
