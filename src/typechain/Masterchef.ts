/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface MasterchefInterface extends utils.Interface {
  functions: {
    "Bao()": FunctionFragment;
    "FINISH_BONUS_AT_BLOCK()": FunctionFragment;
    "HALVING_AT_BLOCK(uint256)": FunctionFragment;
    "PERCENT_FOR_COM()": FunctionFragment;
    "PERCENT_FOR_DEV()": FunctionFragment;
    "PERCENT_FOR_FOUNDERS()": FunctionFragment;
    "PERCENT_FOR_LP()": FunctionFragment;
    "PERCENT_LOCK_BONUS_REWARD()": FunctionFragment;
    "REWARD_MULTIPLIER(uint256)": FunctionFragment;
    "REWARD_PER_BLOCK()": FunctionFragment;
    "START_BLOCK()": FunctionFragment;
    "add(uint256,address,bool)": FunctionFragment;
    "blank()": FunctionFragment;
    "claimReward(uint256)": FunctionFragment;
    "comfundaddr()": FunctionFragment;
    "deposit(uint256,uint256,address)": FunctionFragment;
    "dev(address)": FunctionFragment;
    "devaddr()": FunctionFragment;
    "emergencyWithdraw(uint256)": FunctionFragment;
    "fakeDeposit(uint256,address,uint256)": FunctionFragment;
    "fakeWithdraw(uint256,address,uint256)": FunctionFragment;
    "founderaddr()": FunctionFragment;
    "getGlobalAmount(address)": FunctionFragment;
    "getGlobalRefAmount(address)": FunctionFragment;
    "getMultiplier(uint256,uint256)": FunctionFragment;
    "getNewRewardPerBlock(uint256)": FunctionFragment;
    "getPoolReward(uint256,uint256,uint256)": FunctionFragment;
    "getRefValueOf(address,address)": FunctionFragment;
    "getTotalRefs(address)": FunctionFragment;
    "liquidityaddr()": FunctionFragment;
    "massUpdatePools()": FunctionFragment;
    "migrate(uint256)": FunctionFragment;
    "migrator()": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingReward(uint256,address)": FunctionFragment;
    "poolId1(address)": FunctionFragment;
    "poolInfo(uint256)": FunctionFragment;
    "poolLength()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "set(uint256,uint256,bool)": FunctionFragment;
    "setMigrator(address)": FunctionFragment;
    "totalAllocPoint()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updatePool(uint256)": FunctionFragment;
    "usdOracle()": FunctionFragment;
    "userDelta(uint256)": FunctionFragment;
    "userGlobalInfo(address)": FunctionFragment;
    "userInfo(uint256,address)": FunctionFragment;
    "withdraw(uint256,uint256,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "Bao"
      | "Bao()"
      | "FINISH_BONUS_AT_BLOCK"
      | "FINISH_BONUS_AT_BLOCK()"
      | "HALVING_AT_BLOCK"
      | "HALVING_AT_BLOCK(uint256)"
      | "PERCENT_FOR_COM"
      | "PERCENT_FOR_COM()"
      | "PERCENT_FOR_DEV"
      | "PERCENT_FOR_DEV()"
      | "PERCENT_FOR_FOUNDERS"
      | "PERCENT_FOR_FOUNDERS()"
      | "PERCENT_FOR_LP"
      | "PERCENT_FOR_LP()"
      | "PERCENT_LOCK_BONUS_REWARD"
      | "PERCENT_LOCK_BONUS_REWARD()"
      | "REWARD_MULTIPLIER"
      | "REWARD_MULTIPLIER(uint256)"
      | "REWARD_PER_BLOCK"
      | "REWARD_PER_BLOCK()"
      | "START_BLOCK"
      | "START_BLOCK()"
      | "add"
      | "add(uint256,address,bool)"
      | "blank"
      | "blank()"
      | "claimReward"
      | "claimReward(uint256)"
      | "comfundaddr"
      | "comfundaddr()"
      | "deposit"
      | "deposit(uint256,uint256,address)"
      | "dev"
      | "dev(address)"
      | "devaddr"
      | "devaddr()"
      | "emergencyWithdraw"
      | "emergencyWithdraw(uint256)"
      | "fakeDeposit"
      | "fakeDeposit(uint256,address,uint256)"
      | "fakeWithdraw"
      | "fakeWithdraw(uint256,address,uint256)"
      | "founderaddr"
      | "founderaddr()"
      | "getGlobalAmount"
      | "getGlobalAmount(address)"
      | "getGlobalRefAmount"
      | "getGlobalRefAmount(address)"
      | "getMultiplier"
      | "getMultiplier(uint256,uint256)"
      | "getNewRewardPerBlock"
      | "getNewRewardPerBlock(uint256)"
      | "getPoolReward"
      | "getPoolReward(uint256,uint256,uint256)"
      | "getRefValueOf"
      | "getRefValueOf(address,address)"
      | "getTotalRefs"
      | "getTotalRefs(address)"
      | "liquidityaddr"
      | "liquidityaddr()"
      | "massUpdatePools"
      | "massUpdatePools()"
      | "migrate"
      | "migrate(uint256)"
      | "migrator"
      | "migrator()"
      | "owner"
      | "owner()"
      | "pendingReward"
      | "pendingReward(uint256,address)"
      | "poolId1"
      | "poolId1(address)"
      | "poolInfo"
      | "poolInfo(uint256)"
      | "poolLength"
      | "poolLength()"
      | "renounceOwnership"
      | "renounceOwnership()"
      | "set"
      | "set(uint256,uint256,bool)"
      | "setMigrator"
      | "setMigrator(address)"
      | "totalAllocPoint"
      | "totalAllocPoint()"
      | "transferOwnership"
      | "transferOwnership(address)"
      | "updatePool"
      | "updatePool(uint256)"
      | "usdOracle"
      | "usdOracle()"
      | "userDelta"
      | "userDelta(uint256)"
      | "userGlobalInfo"
      | "userGlobalInfo(address)"
      | "userInfo"
      | "userInfo(uint256,address)"
      | "withdraw"
      | "withdraw(uint256,uint256,address)"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "Bao", values?: undefined): string;
  encodeFunctionData(functionFragment: "Bao()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "FINISH_BONUS_AT_BLOCK",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FINISH_BONUS_AT_BLOCK()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "HALVING_AT_BLOCK",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "HALVING_AT_BLOCK(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "PERCENT_FOR_COM",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERCENT_FOR_COM()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERCENT_FOR_DEV",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERCENT_FOR_DEV()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERCENT_FOR_FOUNDERS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERCENT_FOR_FOUNDERS()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERCENT_FOR_LP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERCENT_FOR_LP()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERCENT_LOCK_BONUS_REWARD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERCENT_LOCK_BONUS_REWARD()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REWARD_MULTIPLIER",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "REWARD_MULTIPLIER(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "REWARD_PER_BLOCK",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REWARD_PER_BLOCK()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "START_BLOCK",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "START_BLOCK()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "add",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "add(uint256,address,bool)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(functionFragment: "blank", values?: undefined): string;
  encodeFunctionData(functionFragment: "blank()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "comfundaddr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "comfundaddr()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit(uint256,uint256,address)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "dev",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "dev(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "devaddr", values?: undefined): string;
  encodeFunctionData(functionFragment: "devaddr()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "fakeDeposit",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fakeDeposit(uint256,address,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fakeWithdraw",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fakeWithdraw(uint256,address,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "founderaddr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "founderaddr()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGlobalAmount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getGlobalAmount(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getGlobalRefAmount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getGlobalRefAmount(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMultiplier",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMultiplier(uint256,uint256)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNewRewardPerBlock",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNewRewardPerBlock(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolReward",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolReward(uint256,uint256,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getRefValueOf",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRefValueOf(address,address)",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalRefs",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalRefs(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityaddr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityaddr()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "massUpdatePools",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "massUpdatePools()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "migrate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "migrate(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "migrator", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "migrator()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingReward",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingReward(uint256,address)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "poolId1",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "poolId1(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "poolInfo",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "poolInfo(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "poolLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "poolLength()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "set",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "set(uint256,uint256,bool)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setMigrator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMigrator(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalAllocPoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalAllocPoint()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePool",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePool(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "usdOracle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "usdOracle()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userDelta",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "userDelta(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "userGlobalInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "userGlobalInfo(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "userInfo",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "userInfo(uint256,address)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw(uint256,uint256,address)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "Bao", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Bao()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "FINISH_BONUS_AT_BLOCK",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FINISH_BONUS_AT_BLOCK()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "HALVING_AT_BLOCK",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "HALVING_AT_BLOCK(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERCENT_FOR_COM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERCENT_FOR_COM()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERCENT_FOR_DEV",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERCENT_FOR_DEV()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERCENT_FOR_FOUNDERS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERCENT_FOR_FOUNDERS()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERCENT_FOR_LP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERCENT_FOR_LP()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERCENT_LOCK_BONUS_REWARD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERCENT_LOCK_BONUS_REWARD()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REWARD_MULTIPLIER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REWARD_MULTIPLIER(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REWARD_PER_BLOCK",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REWARD_PER_BLOCK()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "START_BLOCK",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "START_BLOCK()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "add", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "add(uint256,address,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "blank", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "blank()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimReward(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "comfundaddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "comfundaddr()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deposit(uint256,uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dev", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dev(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "devaddr", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "devaddr()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fakeDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fakeDeposit(uint256,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fakeWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fakeWithdraw(uint256,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "founderaddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "founderaddr()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGlobalAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGlobalAmount(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGlobalRefAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGlobalRefAmount(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMultiplier(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNewRewardPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNewRewardPerBlock(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolReward(uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRefValueOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRefValueOf(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalRefs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalRefs(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityaddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityaddr()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "massUpdatePools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "massUpdatePools()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "migrate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "migrate(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "migrator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "migrator()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingReward(uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolId1", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolId1(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolInfo(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolLength", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolLength()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "set", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "set(uint256,uint256,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMigrator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMigrator(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAllocPoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAllocPoint()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updatePool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updatePool(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "usdOracle()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userDelta", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userDelta(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userGlobalInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userGlobalInfo(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userInfo(uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdraw(uint256,uint256,address)",
    data: BytesLike
  ): Result;

  events: {
    "Deposit(address,uint256,uint256)": EventFragment;
    "EmergencyWithdraw(address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SendBaoReward(address,uint256,uint256,uint256)": EventFragment;
    "Withdraw(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "Deposit(address,uint256,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyWithdraw"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "EmergencyWithdraw(address,uint256,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "OwnershipTransferred(address,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SendBaoReward"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SendBaoReward(address,uint256,uint256,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "Withdraw(address,uint256,uint256)"
  ): EventFragment;
}

export interface DepositEventObject {
  user: string;
  pid: BigNumber;
  amount: BigNumber;
}
export type DepositEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface EmergencyWithdrawEventObject {
  user: string;
  pid: BigNumber;
  amount: BigNumber;
}
export type EmergencyWithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  EmergencyWithdrawEventObject
>;

export type EmergencyWithdrawEventFilter =
  TypedEventFilter<EmergencyWithdrawEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface SendBaoRewardEventObject {
  user: string;
  pid: BigNumber;
  amount: BigNumber;
  lockAmount: BigNumber;
}
export type SendBaoRewardEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  SendBaoRewardEventObject
>;

export type SendBaoRewardEventFilter = TypedEventFilter<SendBaoRewardEvent>;

export interface WithdrawEventObject {
  user: string;
  pid: BigNumber;
  amount: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface Masterchef extends BaseContract {
  contractName: "Masterchef";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MasterchefInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    Bao(overrides?: CallOverrides): Promise<[string]>;

    "Bao()"(overrides?: CallOverrides): Promise<[string]>;

    FINISH_BONUS_AT_BLOCK(overrides?: CallOverrides): Promise<[BigNumber]>;

    "FINISH_BONUS_AT_BLOCK()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    HALVING_AT_BLOCK(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "HALVING_AT_BLOCK(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    PERCENT_FOR_COM(overrides?: CallOverrides): Promise<[BigNumber]>;

    "PERCENT_FOR_COM()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    PERCENT_FOR_DEV(overrides?: CallOverrides): Promise<[BigNumber]>;

    "PERCENT_FOR_DEV()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    PERCENT_FOR_FOUNDERS(overrides?: CallOverrides): Promise<[BigNumber]>;

    "PERCENT_FOR_FOUNDERS()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    PERCENT_FOR_LP(overrides?: CallOverrides): Promise<[BigNumber]>;

    "PERCENT_FOR_LP()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    PERCENT_LOCK_BONUS_REWARD(overrides?: CallOverrides): Promise<[BigNumber]>;

    "PERCENT_LOCK_BONUS_REWARD()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    REWARD_MULTIPLIER(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "REWARD_MULTIPLIER(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    REWARD_PER_BLOCK(overrides?: CallOverrides): Promise<[BigNumber]>;

    "REWARD_PER_BLOCK()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    START_BLOCK(overrides?: CallOverrides): Promise<[BigNumber]>;

    "START_BLOCK()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    add(
      _allocPoint: PromiseOrValue<BigNumberish>,
      _lpToken: PromiseOrValue<string>,
      _withUpdate: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "add(uint256,address,bool)"(
      _allocPoint: PromiseOrValue<BigNumberish>,
      _lpToken: PromiseOrValue<string>,
      _withUpdate: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    blank(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "blank()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimReward(
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "claimReward(uint256)"(
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    comfundaddr(overrides?: CallOverrides): Promise<[string]>;

    "comfundaddr()"(overrides?: CallOverrides): Promise<[string]>;

    deposit(
      _pid: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _ref: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "deposit(uint256,uint256,address)"(
      _pid: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _ref: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dev(
      _devaddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "dev(address)"(
      _devaddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    devaddr(overrides?: CallOverrides): Promise<[string]>;

    "devaddr()"(overrides?: CallOverrides): Promise<[string]>;

    emergencyWithdraw(
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "emergencyWithdraw(uint256)"(
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fakeDeposit(
      _pid: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      _block: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "fakeDeposit(uint256,address,uint256)"(
      _pid: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      _block: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fakeWithdraw(
      _pid: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      _block: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "fakeWithdraw(uint256,address,uint256)"(
      _pid: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      _block: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    founderaddr(overrides?: CallOverrides): Promise<[string]>;

    "founderaddr()"(overrides?: CallOverrides): Promise<[string]>;

    getGlobalAmount(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getGlobalAmount(address)"(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getGlobalRefAmount(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getGlobalRefAmount(address)"(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMultiplier(
      _from: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getMultiplier(uint256,uint256)"(
      _from: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNewRewardPerBlock(
      pid1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getNewRewardPerBlock(uint256)"(
      pid1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPoolReward(
      _from: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BigNumberish>,
      _allocPoint: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        forDev: BigNumber;
        forFarmer: BigNumber;
        forLP: BigNumber;
        forCom: BigNumber;
        forFounders: BigNumber;
      }
    >;

    "getPoolReward(uint256,uint256,uint256)"(
      _from: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BigNumberish>,
      _allocPoint: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        forDev: BigNumber;
        forFarmer: BigNumber;
        forLP: BigNumber;
        forCom: BigNumber;
        forFounders: BigNumber;
      }
    >;

    getRefValueOf(
      _user: PromiseOrValue<string>,
      _user2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getRefValueOf(address,address)"(
      _user: PromiseOrValue<string>,
      _user2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalRefs(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getTotalRefs(address)"(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    liquidityaddr(overrides?: CallOverrides): Promise<[string]>;

    "liquidityaddr()"(overrides?: CallOverrides): Promise<[string]>;

    massUpdatePools(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "massUpdatePools()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    migrate(
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "migrate(uint256)"(
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    migrator(overrides?: CallOverrides): Promise<[string]>;

    "migrator()"(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    pendingReward(
      _pid: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "pendingReward(uint256,address)"(
      _pid: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    poolId1(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "poolId1(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    poolInfo(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        lpToken: string;
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
        accBaoPerShare: BigNumber;
      }
    >;

    "poolInfo(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        lpToken: string;
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
        accBaoPerShare: BigNumber;
      }
    >;

    poolLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    "poolLength()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    set(
      _pid: PromiseOrValue<BigNumberish>,
      _allocPoint: PromiseOrValue<BigNumberish>,
      _withUpdate: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "set(uint256,uint256,bool)"(
      _pid: PromiseOrValue<BigNumberish>,
      _allocPoint: PromiseOrValue<BigNumberish>,
      _withUpdate: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMigrator(
      _migrator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setMigrator(address)"(
      _migrator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalAllocPoint(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalAllocPoint()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePool(
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "updatePool(uint256)"(
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    usdOracle(overrides?: CallOverrides): Promise<[string]>;

    "usdOracle()"(overrides?: CallOverrides): Promise<[string]>;

    userDelta(
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "userDelta(uint256)"(
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userGlobalInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        globalAmount: BigNumber;
        totalReferals: BigNumber;
        globalRefAmount: BigNumber;
      }
    >;

    "userGlobalInfo(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        globalAmount: BigNumber;
        totalReferals: BigNumber;
        globalRefAmount: BigNumber;
      }
    >;

    userInfo(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        amount: BigNumber;
        rewardDebt: BigNumber;
        rewardDebtAtBlock: BigNumber;
        lastWithdrawBlock: BigNumber;
        firstDepositBlock: BigNumber;
        blockdelta: BigNumber;
        lastDepositBlock: BigNumber;
      }
    >;

    "userInfo(uint256,address)"(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        amount: BigNumber;
        rewardDebt: BigNumber;
        rewardDebtAtBlock: BigNumber;
        lastWithdrawBlock: BigNumber;
        firstDepositBlock: BigNumber;
        blockdelta: BigNumber;
        lastDepositBlock: BigNumber;
      }
    >;

    withdraw(
      _pid: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _ref: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "withdraw(uint256,uint256,address)"(
      _pid: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _ref: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  Bao(overrides?: CallOverrides): Promise<string>;

  "Bao()"(overrides?: CallOverrides): Promise<string>;

  FINISH_BONUS_AT_BLOCK(overrides?: CallOverrides): Promise<BigNumber>;

  "FINISH_BONUS_AT_BLOCK()"(overrides?: CallOverrides): Promise<BigNumber>;

  HALVING_AT_BLOCK(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "HALVING_AT_BLOCK(uint256)"(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  PERCENT_FOR_COM(overrides?: CallOverrides): Promise<BigNumber>;

  "PERCENT_FOR_COM()"(overrides?: CallOverrides): Promise<BigNumber>;

  PERCENT_FOR_DEV(overrides?: CallOverrides): Promise<BigNumber>;

  "PERCENT_FOR_DEV()"(overrides?: CallOverrides): Promise<BigNumber>;

  PERCENT_FOR_FOUNDERS(overrides?: CallOverrides): Promise<BigNumber>;

  "PERCENT_FOR_FOUNDERS()"(overrides?: CallOverrides): Promise<BigNumber>;

  PERCENT_FOR_LP(overrides?: CallOverrides): Promise<BigNumber>;

  "PERCENT_FOR_LP()"(overrides?: CallOverrides): Promise<BigNumber>;

  PERCENT_LOCK_BONUS_REWARD(overrides?: CallOverrides): Promise<BigNumber>;

  "PERCENT_LOCK_BONUS_REWARD()"(overrides?: CallOverrides): Promise<BigNumber>;

  REWARD_MULTIPLIER(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "REWARD_MULTIPLIER(uint256)"(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  REWARD_PER_BLOCK(overrides?: CallOverrides): Promise<BigNumber>;

  "REWARD_PER_BLOCK()"(overrides?: CallOverrides): Promise<BigNumber>;

  START_BLOCK(overrides?: CallOverrides): Promise<BigNumber>;

  "START_BLOCK()"(overrides?: CallOverrides): Promise<BigNumber>;

  add(
    _allocPoint: PromiseOrValue<BigNumberish>,
    _lpToken: PromiseOrValue<string>,
    _withUpdate: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "add(uint256,address,bool)"(
    _allocPoint: PromiseOrValue<BigNumberish>,
    _lpToken: PromiseOrValue<string>,
    _withUpdate: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  blank(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "blank()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimReward(
    _pid: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "claimReward(uint256)"(
    _pid: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  comfundaddr(overrides?: CallOverrides): Promise<string>;

  "comfundaddr()"(overrides?: CallOverrides): Promise<string>;

  deposit(
    _pid: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    _ref: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "deposit(uint256,uint256,address)"(
    _pid: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    _ref: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dev(
    _devaddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "dev(address)"(
    _devaddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  devaddr(overrides?: CallOverrides): Promise<string>;

  "devaddr()"(overrides?: CallOverrides): Promise<string>;

  emergencyWithdraw(
    _pid: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "emergencyWithdraw(uint256)"(
    _pid: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fakeDeposit(
    _pid: PromiseOrValue<BigNumberish>,
    _user: PromiseOrValue<string>,
    _block: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "fakeDeposit(uint256,address,uint256)"(
    _pid: PromiseOrValue<BigNumberish>,
    _user: PromiseOrValue<string>,
    _block: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fakeWithdraw(
    _pid: PromiseOrValue<BigNumberish>,
    _user: PromiseOrValue<string>,
    _block: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "fakeWithdraw(uint256,address,uint256)"(
    _pid: PromiseOrValue<BigNumberish>,
    _user: PromiseOrValue<string>,
    _block: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  founderaddr(overrides?: CallOverrides): Promise<string>;

  "founderaddr()"(overrides?: CallOverrides): Promise<string>;

  getGlobalAmount(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getGlobalAmount(address)"(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getGlobalRefAmount(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getGlobalRefAmount(address)"(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMultiplier(
    _from: PromiseOrValue<BigNumberish>,
    _to: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getMultiplier(uint256,uint256)"(
    _from: PromiseOrValue<BigNumberish>,
    _to: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNewRewardPerBlock(
    pid1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getNewRewardPerBlock(uint256)"(
    pid1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPoolReward(
    _from: PromiseOrValue<BigNumberish>,
    _to: PromiseOrValue<BigNumberish>,
    _allocPoint: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      forDev: BigNumber;
      forFarmer: BigNumber;
      forLP: BigNumber;
      forCom: BigNumber;
      forFounders: BigNumber;
    }
  >;

  "getPoolReward(uint256,uint256,uint256)"(
    _from: PromiseOrValue<BigNumberish>,
    _to: PromiseOrValue<BigNumberish>,
    _allocPoint: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      forDev: BigNumber;
      forFarmer: BigNumber;
      forLP: BigNumber;
      forCom: BigNumber;
      forFounders: BigNumber;
    }
  >;

  getRefValueOf(
    _user: PromiseOrValue<string>,
    _user2: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getRefValueOf(address,address)"(
    _user: PromiseOrValue<string>,
    _user2: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalRefs(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getTotalRefs(address)"(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  liquidityaddr(overrides?: CallOverrides): Promise<string>;

  "liquidityaddr()"(overrides?: CallOverrides): Promise<string>;

  massUpdatePools(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "massUpdatePools()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  migrate(
    _pid: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "migrate(uint256)"(
    _pid: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  migrator(overrides?: CallOverrides): Promise<string>;

  "migrator()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pendingReward(
    _pid: PromiseOrValue<BigNumberish>,
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "pendingReward(uint256,address)"(
    _pid: PromiseOrValue<BigNumberish>,
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  poolId1(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "poolId1(address)"(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  poolInfo(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber] & {
      lpToken: string;
      allocPoint: BigNumber;
      lastRewardBlock: BigNumber;
      accBaoPerShare: BigNumber;
    }
  >;

  "poolInfo(uint256)"(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber] & {
      lpToken: string;
      allocPoint: BigNumber;
      lastRewardBlock: BigNumber;
      accBaoPerShare: BigNumber;
    }
  >;

  poolLength(overrides?: CallOverrides): Promise<BigNumber>;

  "poolLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  set(
    _pid: PromiseOrValue<BigNumberish>,
    _allocPoint: PromiseOrValue<BigNumberish>,
    _withUpdate: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "set(uint256,uint256,bool)"(
    _pid: PromiseOrValue<BigNumberish>,
    _allocPoint: PromiseOrValue<BigNumberish>,
    _withUpdate: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMigrator(
    _migrator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setMigrator(address)"(
    _migrator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

  "totalAllocPoint()"(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePool(
    _pid: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "updatePool(uint256)"(
    _pid: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  usdOracle(overrides?: CallOverrides): Promise<string>;

  "usdOracle()"(overrides?: CallOverrides): Promise<string>;

  userDelta(
    _pid: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "userDelta(uint256)"(
    _pid: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userGlobalInfo(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      globalAmount: BigNumber;
      totalReferals: BigNumber;
      globalRefAmount: BigNumber;
    }
  >;

  "userGlobalInfo(address)"(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      globalAmount: BigNumber;
      totalReferals: BigNumber;
      globalRefAmount: BigNumber;
    }
  >;

  userInfo(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      amount: BigNumber;
      rewardDebt: BigNumber;
      rewardDebtAtBlock: BigNumber;
      lastWithdrawBlock: BigNumber;
      firstDepositBlock: BigNumber;
      blockdelta: BigNumber;
      lastDepositBlock: BigNumber;
    }
  >;

  "userInfo(uint256,address)"(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      amount: BigNumber;
      rewardDebt: BigNumber;
      rewardDebtAtBlock: BigNumber;
      lastWithdrawBlock: BigNumber;
      firstDepositBlock: BigNumber;
      blockdelta: BigNumber;
      lastDepositBlock: BigNumber;
    }
  >;

  withdraw(
    _pid: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    _ref: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "withdraw(uint256,uint256,address)"(
    _pid: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    _ref: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    Bao(overrides?: CallOverrides): Promise<string>;

    "Bao()"(overrides?: CallOverrides): Promise<string>;

    FINISH_BONUS_AT_BLOCK(overrides?: CallOverrides): Promise<BigNumber>;

    "FINISH_BONUS_AT_BLOCK()"(overrides?: CallOverrides): Promise<BigNumber>;

    HALVING_AT_BLOCK(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "HALVING_AT_BLOCK(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    PERCENT_FOR_COM(overrides?: CallOverrides): Promise<BigNumber>;

    "PERCENT_FOR_COM()"(overrides?: CallOverrides): Promise<BigNumber>;

    PERCENT_FOR_DEV(overrides?: CallOverrides): Promise<BigNumber>;

    "PERCENT_FOR_DEV()"(overrides?: CallOverrides): Promise<BigNumber>;

    PERCENT_FOR_FOUNDERS(overrides?: CallOverrides): Promise<BigNumber>;

    "PERCENT_FOR_FOUNDERS()"(overrides?: CallOverrides): Promise<BigNumber>;

    PERCENT_FOR_LP(overrides?: CallOverrides): Promise<BigNumber>;

    "PERCENT_FOR_LP()"(overrides?: CallOverrides): Promise<BigNumber>;

    PERCENT_LOCK_BONUS_REWARD(overrides?: CallOverrides): Promise<BigNumber>;

    "PERCENT_LOCK_BONUS_REWARD()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    REWARD_MULTIPLIER(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "REWARD_MULTIPLIER(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    REWARD_PER_BLOCK(overrides?: CallOverrides): Promise<BigNumber>;

    "REWARD_PER_BLOCK()"(overrides?: CallOverrides): Promise<BigNumber>;

    START_BLOCK(overrides?: CallOverrides): Promise<BigNumber>;

    "START_BLOCK()"(overrides?: CallOverrides): Promise<BigNumber>;

    add(
      _allocPoint: PromiseOrValue<BigNumberish>,
      _lpToken: PromiseOrValue<string>,
      _withUpdate: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    "add(uint256,address,bool)"(
      _allocPoint: PromiseOrValue<BigNumberish>,
      _lpToken: PromiseOrValue<string>,
      _withUpdate: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    blank(overrides?: CallOverrides): Promise<void>;

    "blank()"(overrides?: CallOverrides): Promise<void>;

    claimReward(
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "claimReward(uint256)"(
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    comfundaddr(overrides?: CallOverrides): Promise<string>;

    "comfundaddr()"(overrides?: CallOverrides): Promise<string>;

    deposit(
      _pid: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _ref: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit(uint256,uint256,address)"(
      _pid: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _ref: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    dev(
      _devaddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "dev(address)"(
      _devaddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    devaddr(overrides?: CallOverrides): Promise<string>;

    "devaddr()"(overrides?: CallOverrides): Promise<string>;

    emergencyWithdraw(
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "emergencyWithdraw(uint256)"(
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    fakeDeposit(
      _pid: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      _block: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "fakeDeposit(uint256,address,uint256)"(
      _pid: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      _block: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    fakeWithdraw(
      _pid: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      _block: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "fakeWithdraw(uint256,address,uint256)"(
      _pid: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      _block: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    founderaddr(overrides?: CallOverrides): Promise<string>;

    "founderaddr()"(overrides?: CallOverrides): Promise<string>;

    getGlobalAmount(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getGlobalAmount(address)"(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGlobalRefAmount(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getGlobalRefAmount(address)"(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMultiplier(
      _from: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMultiplier(uint256,uint256)"(
      _from: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNewRewardPerBlock(
      pid1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNewRewardPerBlock(uint256)"(
      pid1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolReward(
      _from: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BigNumberish>,
      _allocPoint: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        forDev: BigNumber;
        forFarmer: BigNumber;
        forLP: BigNumber;
        forCom: BigNumber;
        forFounders: BigNumber;
      }
    >;

    "getPoolReward(uint256,uint256,uint256)"(
      _from: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BigNumberish>,
      _allocPoint: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        forDev: BigNumber;
        forFarmer: BigNumber;
        forLP: BigNumber;
        forCom: BigNumber;
        forFounders: BigNumber;
      }
    >;

    getRefValueOf(
      _user: PromiseOrValue<string>,
      _user2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRefValueOf(address,address)"(
      _user: PromiseOrValue<string>,
      _user2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalRefs(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTotalRefs(address)"(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidityaddr(overrides?: CallOverrides): Promise<string>;

    "liquidityaddr()"(overrides?: CallOverrides): Promise<string>;

    massUpdatePools(overrides?: CallOverrides): Promise<void>;

    "massUpdatePools()"(overrides?: CallOverrides): Promise<void>;

    migrate(
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "migrate(uint256)"(
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    migrator(overrides?: CallOverrides): Promise<string>;

    "migrator()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pendingReward(
      _pid: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pendingReward(uint256,address)"(
      _pid: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolId1(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "poolId1(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolInfo(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        lpToken: string;
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
        accBaoPerShare: BigNumber;
      }
    >;

    "poolInfo(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        lpToken: string;
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
        accBaoPerShare: BigNumber;
      }
    >;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    "poolLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    set(
      _pid: PromiseOrValue<BigNumberish>,
      _allocPoint: PromiseOrValue<BigNumberish>,
      _withUpdate: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    "set(uint256,uint256,bool)"(
      _pid: PromiseOrValue<BigNumberish>,
      _allocPoint: PromiseOrValue<BigNumberish>,
      _withUpdate: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMigrator(
      _migrator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMigrator(address)"(
      _migrator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    "totalAllocPoint()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePool(
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "updatePool(uint256)"(
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    usdOracle(overrides?: CallOverrides): Promise<string>;

    "usdOracle()"(overrides?: CallOverrides): Promise<string>;

    userDelta(
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userDelta(uint256)"(
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userGlobalInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        globalAmount: BigNumber;
        totalReferals: BigNumber;
        globalRefAmount: BigNumber;
      }
    >;

    "userGlobalInfo(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        globalAmount: BigNumber;
        totalReferals: BigNumber;
        globalRefAmount: BigNumber;
      }
    >;

    userInfo(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        amount: BigNumber;
        rewardDebt: BigNumber;
        rewardDebtAtBlock: BigNumber;
        lastWithdrawBlock: BigNumber;
        firstDepositBlock: BigNumber;
        blockdelta: BigNumber;
        lastDepositBlock: BigNumber;
      }
    >;

    "userInfo(uint256,address)"(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        amount: BigNumber;
        rewardDebt: BigNumber;
        rewardDebtAtBlock: BigNumber;
        lastWithdrawBlock: BigNumber;
        firstDepositBlock: BigNumber;
        blockdelta: BigNumber;
        lastDepositBlock: BigNumber;
      }
    >;

    withdraw(
      _pid: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _ref: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(uint256,uint256,address)"(
      _pid: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _ref: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Deposit(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): DepositEventFilter;
    Deposit(
      user?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): DepositEventFilter;

    "EmergencyWithdraw(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): EmergencyWithdrawEventFilter;
    EmergencyWithdraw(
      user?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): EmergencyWithdrawEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "SendBaoReward(address,uint256,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      lockAmount?: null
    ): SendBaoRewardEventFilter;
    SendBaoReward(
      user?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      lockAmount?: null
    ): SendBaoRewardEventFilter;

    "Withdraw(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): WithdrawEventFilter;
    Withdraw(
      user?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    Bao(overrides?: CallOverrides): Promise<BigNumber>;

    "Bao()"(overrides?: CallOverrides): Promise<BigNumber>;

    FINISH_BONUS_AT_BLOCK(overrides?: CallOverrides): Promise<BigNumber>;

    "FINISH_BONUS_AT_BLOCK()"(overrides?: CallOverrides): Promise<BigNumber>;

    HALVING_AT_BLOCK(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "HALVING_AT_BLOCK(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    PERCENT_FOR_COM(overrides?: CallOverrides): Promise<BigNumber>;

    "PERCENT_FOR_COM()"(overrides?: CallOverrides): Promise<BigNumber>;

    PERCENT_FOR_DEV(overrides?: CallOverrides): Promise<BigNumber>;

    "PERCENT_FOR_DEV()"(overrides?: CallOverrides): Promise<BigNumber>;

    PERCENT_FOR_FOUNDERS(overrides?: CallOverrides): Promise<BigNumber>;

    "PERCENT_FOR_FOUNDERS()"(overrides?: CallOverrides): Promise<BigNumber>;

    PERCENT_FOR_LP(overrides?: CallOverrides): Promise<BigNumber>;

    "PERCENT_FOR_LP()"(overrides?: CallOverrides): Promise<BigNumber>;

    PERCENT_LOCK_BONUS_REWARD(overrides?: CallOverrides): Promise<BigNumber>;

    "PERCENT_LOCK_BONUS_REWARD()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    REWARD_MULTIPLIER(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "REWARD_MULTIPLIER(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    REWARD_PER_BLOCK(overrides?: CallOverrides): Promise<BigNumber>;

    "REWARD_PER_BLOCK()"(overrides?: CallOverrides): Promise<BigNumber>;

    START_BLOCK(overrides?: CallOverrides): Promise<BigNumber>;

    "START_BLOCK()"(overrides?: CallOverrides): Promise<BigNumber>;

    add(
      _allocPoint: PromiseOrValue<BigNumberish>,
      _lpToken: PromiseOrValue<string>,
      _withUpdate: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "add(uint256,address,bool)"(
      _allocPoint: PromiseOrValue<BigNumberish>,
      _lpToken: PromiseOrValue<string>,
      _withUpdate: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    blank(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "blank()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimReward(
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "claimReward(uint256)"(
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    comfundaddr(overrides?: CallOverrides): Promise<BigNumber>;

    "comfundaddr()"(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _pid: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _ref: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "deposit(uint256,uint256,address)"(
      _pid: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _ref: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dev(
      _devaddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "dev(address)"(
      _devaddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    devaddr(overrides?: CallOverrides): Promise<BigNumber>;

    "devaddr()"(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyWithdraw(
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "emergencyWithdraw(uint256)"(
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fakeDeposit(
      _pid: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      _block: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "fakeDeposit(uint256,address,uint256)"(
      _pid: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      _block: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fakeWithdraw(
      _pid: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      _block: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "fakeWithdraw(uint256,address,uint256)"(
      _pid: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      _block: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    founderaddr(overrides?: CallOverrides): Promise<BigNumber>;

    "founderaddr()"(overrides?: CallOverrides): Promise<BigNumber>;

    getGlobalAmount(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getGlobalAmount(address)"(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGlobalRefAmount(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getGlobalRefAmount(address)"(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMultiplier(
      _from: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMultiplier(uint256,uint256)"(
      _from: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNewRewardPerBlock(
      pid1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNewRewardPerBlock(uint256)"(
      pid1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolReward(
      _from: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BigNumberish>,
      _allocPoint: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPoolReward(uint256,uint256,uint256)"(
      _from: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BigNumberish>,
      _allocPoint: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRefValueOf(
      _user: PromiseOrValue<string>,
      _user2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRefValueOf(address,address)"(
      _user: PromiseOrValue<string>,
      _user2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalRefs(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTotalRefs(address)"(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidityaddr(overrides?: CallOverrides): Promise<BigNumber>;

    "liquidityaddr()"(overrides?: CallOverrides): Promise<BigNumber>;

    massUpdatePools(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "massUpdatePools()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    migrate(
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "migrate(uint256)"(
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    migrator(overrides?: CallOverrides): Promise<BigNumber>;

    "migrator()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pendingReward(
      _pid: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pendingReward(uint256,address)"(
      _pid: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolId1(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "poolId1(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolInfo(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "poolInfo(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    "poolLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    set(
      _pid: PromiseOrValue<BigNumberish>,
      _allocPoint: PromiseOrValue<BigNumberish>,
      _withUpdate: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "set(uint256,uint256,bool)"(
      _pid: PromiseOrValue<BigNumberish>,
      _allocPoint: PromiseOrValue<BigNumberish>,
      _withUpdate: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMigrator(
      _migrator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setMigrator(address)"(
      _migrator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    "totalAllocPoint()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePool(
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "updatePool(uint256)"(
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    usdOracle(overrides?: CallOverrides): Promise<BigNumber>;

    "usdOracle()"(overrides?: CallOverrides): Promise<BigNumber>;

    userDelta(
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userDelta(uint256)"(
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userGlobalInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userGlobalInfo(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userInfo(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userInfo(uint256,address)"(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _pid: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _ref: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "withdraw(uint256,uint256,address)"(
      _pid: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _ref: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    Bao(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "Bao()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    FINISH_BONUS_AT_BLOCK(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "FINISH_BONUS_AT_BLOCK()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    HALVING_AT_BLOCK(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "HALVING_AT_BLOCK(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PERCENT_FOR_COM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "PERCENT_FOR_COM()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PERCENT_FOR_DEV(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "PERCENT_FOR_DEV()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PERCENT_FOR_FOUNDERS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "PERCENT_FOR_FOUNDERS()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PERCENT_FOR_LP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "PERCENT_FOR_LP()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PERCENT_LOCK_BONUS_REWARD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "PERCENT_LOCK_BONUS_REWARD()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REWARD_MULTIPLIER(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "REWARD_MULTIPLIER(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REWARD_PER_BLOCK(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "REWARD_PER_BLOCK()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    START_BLOCK(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "START_BLOCK()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    add(
      _allocPoint: PromiseOrValue<BigNumberish>,
      _lpToken: PromiseOrValue<string>,
      _withUpdate: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "add(uint256,address,bool)"(
      _allocPoint: PromiseOrValue<BigNumberish>,
      _lpToken: PromiseOrValue<string>,
      _withUpdate: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    blank(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "blank()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimReward(
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "claimReward(uint256)"(
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    comfundaddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "comfundaddr()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      _pid: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _ref: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "deposit(uint256,uint256,address)"(
      _pid: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _ref: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dev(
      _devaddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "dev(address)"(
      _devaddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    devaddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "devaddr()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "emergencyWithdraw(uint256)"(
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fakeDeposit(
      _pid: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      _block: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "fakeDeposit(uint256,address,uint256)"(
      _pid: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      _block: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fakeWithdraw(
      _pid: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      _block: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "fakeWithdraw(uint256,address,uint256)"(
      _pid: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      _block: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    founderaddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "founderaddr()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getGlobalAmount(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getGlobalAmount(address)"(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGlobalRefAmount(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getGlobalRefAmount(address)"(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMultiplier(
      _from: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMultiplier(uint256,uint256)"(
      _from: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNewRewardPerBlock(
      pid1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNewRewardPerBlock(uint256)"(
      pid1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolReward(
      _from: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BigNumberish>,
      _allocPoint: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPoolReward(uint256,uint256,uint256)"(
      _from: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BigNumberish>,
      _allocPoint: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRefValueOf(
      _user: PromiseOrValue<string>,
      _user2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRefValueOf(address,address)"(
      _user: PromiseOrValue<string>,
      _user2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalRefs(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTotalRefs(address)"(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidityaddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "liquidityaddr()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    massUpdatePools(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "massUpdatePools()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    migrate(
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "migrate(uint256)"(
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    migrator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "migrator()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingReward(
      _pid: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pendingReward(uint256,address)"(
      _pid: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolId1(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "poolId1(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolInfo(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "poolInfo(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "poolLength()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    set(
      _pid: PromiseOrValue<BigNumberish>,
      _allocPoint: PromiseOrValue<BigNumberish>,
      _withUpdate: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "set(uint256,uint256,bool)"(
      _pid: PromiseOrValue<BigNumberish>,
      _allocPoint: PromiseOrValue<BigNumberish>,
      _withUpdate: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMigrator(
      _migrator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setMigrator(address)"(
      _migrator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalAllocPoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalAllocPoint()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePool(
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "updatePool(uint256)"(
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    usdOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "usdOracle()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userDelta(
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userDelta(uint256)"(
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userGlobalInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userGlobalInfo(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userInfo(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userInfo(uint256,address)"(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _pid: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _ref: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256,uint256,address)"(
      _pid: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _ref: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
