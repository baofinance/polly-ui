/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface LendingRegistryInterface extends utils.Interface {
  functions: {
    "getBestApr(address,bytes32[])": FunctionFragment;
    "getLendTXData(address,uint256,address,bytes32)": FunctionFragment;
    "getUnlendTXData(address,uint256,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "protocolToLogic(bytes32)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setProtocolToLogic(bytes32,address)": FunctionFragment;
    "setUnderlyingToProtocolWrapped(address,bytes32,address)": FunctionFragment;
    "setWrappedToProtocol(address,bytes32)": FunctionFragment;
    "setWrappedToUnderlying(address,address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "underlyingToProtocolWrapped(address,bytes32)": FunctionFragment;
    "wrappedToProtocol(address)": FunctionFragment;
    "wrappedToUnderlying(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getBestApr"
      | "getBestApr(address,bytes32[])"
      | "getLendTXData"
      | "getLendTXData(address,uint256,address,bytes32)"
      | "getUnlendTXData"
      | "getUnlendTXData(address,uint256,address)"
      | "owner"
      | "owner()"
      | "protocolToLogic"
      | "protocolToLogic(bytes32)"
      | "renounceOwnership"
      | "renounceOwnership()"
      | "setProtocolToLogic"
      | "setProtocolToLogic(bytes32,address)"
      | "setUnderlyingToProtocolWrapped"
      | "setUnderlyingToProtocolWrapped(address,bytes32,address)"
      | "setWrappedToProtocol"
      | "setWrappedToProtocol(address,bytes32)"
      | "setWrappedToUnderlying"
      | "setWrappedToUnderlying(address,address)"
      | "transferOwnership"
      | "transferOwnership(address)"
      | "underlyingToProtocolWrapped"
      | "underlyingToProtocolWrapped(address,bytes32)"
      | "wrappedToProtocol"
      | "wrappedToProtocol(address)"
      | "wrappedToUnderlying"
      | "wrappedToUnderlying(address)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getBestApr",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getBestApr(address,bytes32[])",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getLendTXData",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getLendTXData(address,uint256,address,bytes32)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnlendTXData",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnlendTXData(address,uint256,address)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "protocolToLogic",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolToLogic(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolToLogic",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolToLogic(bytes32,address)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setUnderlyingToProtocolWrapped",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setUnderlyingToProtocolWrapped(address,bytes32,address)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setWrappedToProtocol",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setWrappedToProtocol(address,bytes32)",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setWrappedToUnderlying",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setWrappedToUnderlying(address,address)",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingToProtocolWrapped",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingToProtocolWrapped(address,bytes32)",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "wrappedToProtocol",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "wrappedToProtocol(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "wrappedToUnderlying",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "wrappedToUnderlying(address)",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "getBestApr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBestApr(address,bytes32[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLendTXData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLendTXData(address,uint256,address,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnlendTXData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnlendTXData(address,uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "protocolToLogic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolToLogic(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolToLogic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolToLogic(bytes32,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUnderlyingToProtocolWrapped",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUnderlyingToProtocolWrapped(address,bytes32,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWrappedToProtocol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWrappedToProtocol(address,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWrappedToUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWrappedToUnderlying(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlyingToProtocolWrapped",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlyingToProtocolWrapped(address,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wrappedToProtocol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wrappedToProtocol(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wrappedToUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wrappedToUnderlying(address)",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "ProtocolToLogicSet(bytes32,address)": EventFragment;
    "UnderlyingToProtocolWrappedSet(address,bytes32,address)": EventFragment;
    "WrappedToProtocolSet(address,bytes32)": EventFragment;
    "WrappedToUnderlyingSet(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "OwnershipTransferred(address,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProtocolToLogicSet"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ProtocolToLogicSet(bytes32,address)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "UnderlyingToProtocolWrappedSet"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "UnderlyingToProtocolWrappedSet(address,bytes32,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WrappedToProtocolSet"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "WrappedToProtocolSet(address,bytes32)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WrappedToUnderlyingSet"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "WrappedToUnderlyingSet(address,address)"
  ): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ProtocolToLogicSetEventObject {
  protocol: string;
  logic: string;
}
export type ProtocolToLogicSetEvent = TypedEvent<
  [string, string],
  ProtocolToLogicSetEventObject
>;

export type ProtocolToLogicSetEventFilter =
  TypedEventFilter<ProtocolToLogicSetEvent>;

export interface UnderlyingToProtocolWrappedSetEventObject {
  underlying: string;
  protocol: string;
  wrapped: string;
}
export type UnderlyingToProtocolWrappedSetEvent = TypedEvent<
  [string, string, string],
  UnderlyingToProtocolWrappedSetEventObject
>;

export type UnderlyingToProtocolWrappedSetEventFilter =
  TypedEventFilter<UnderlyingToProtocolWrappedSetEvent>;

export interface WrappedToProtocolSetEventObject {
  wrapped: string;
  protocol: string;
}
export type WrappedToProtocolSetEvent = TypedEvent<
  [string, string],
  WrappedToProtocolSetEventObject
>;

export type WrappedToProtocolSetEventFilter =
  TypedEventFilter<WrappedToProtocolSetEvent>;

export interface WrappedToUnderlyingSetEventObject {
  wrapped: string;
  underlying: string;
}
export type WrappedToUnderlyingSetEvent = TypedEvent<
  [string, string],
  WrappedToUnderlyingSetEventObject
>;

export type WrappedToUnderlyingSetEventFilter =
  TypedEventFilter<WrappedToUnderlyingSetEvent>;

export interface LendingRegistry extends BaseContract {
  contractName: "LendingRegistry";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LendingRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getBestApr(
      _underlying: PromiseOrValue<string>,
      _protocols: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { apr: BigNumber; protocol: string }>;

    "getBestApr(address,bytes32[])"(
      _underlying: PromiseOrValue<string>,
      _protocols: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { apr: BigNumber; protocol: string }>;

    getLendTXData(
      _underlying: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _tokenHolder: PromiseOrValue<string>,
      _protocol: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string[], string[]] & { targets: string[]; data: string[] }>;

    "getLendTXData(address,uint256,address,bytes32)"(
      _underlying: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _tokenHolder: PromiseOrValue<string>,
      _protocol: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string[], string[]] & { targets: string[]; data: string[] }>;

    getUnlendTXData(
      _wrapped: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[], string[]] & { targets: string[]; data: string[] }>;

    "getUnlendTXData(address,uint256,address)"(
      _wrapped: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[], string[]] & { targets: string[]; data: string[] }>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    protocolToLogic(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "protocolToLogic(bytes32)"(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setProtocolToLogic(
      _protocol: PromiseOrValue<BytesLike>,
      _logic: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setProtocolToLogic(bytes32,address)"(
      _protocol: PromiseOrValue<BytesLike>,
      _logic: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUnderlyingToProtocolWrapped(
      _underlying: PromiseOrValue<string>,
      _protocol: PromiseOrValue<BytesLike>,
      _wrapped: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setUnderlyingToProtocolWrapped(address,bytes32,address)"(
      _underlying: PromiseOrValue<string>,
      _protocol: PromiseOrValue<BytesLike>,
      _wrapped: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWrappedToProtocol(
      _wrapped: PromiseOrValue<string>,
      _protocol: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setWrappedToProtocol(address,bytes32)"(
      _wrapped: PromiseOrValue<string>,
      _protocol: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWrappedToUnderlying(
      _wrapped: PromiseOrValue<string>,
      _underlying: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setWrappedToUnderlying(address,address)"(
      _wrapped: PromiseOrValue<string>,
      _underlying: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    underlyingToProtocolWrapped(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "underlyingToProtocolWrapped(address,bytes32)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    wrappedToProtocol(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "wrappedToProtocol(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    wrappedToUnderlying(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "wrappedToUnderlying(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  getBestApr(
    _underlying: PromiseOrValue<string>,
    _protocols: PromiseOrValue<BytesLike>[],
    overrides?: CallOverrides
  ): Promise<[BigNumber, string] & { apr: BigNumber; protocol: string }>;

  "getBestApr(address,bytes32[])"(
    _underlying: PromiseOrValue<string>,
    _protocols: PromiseOrValue<BytesLike>[],
    overrides?: CallOverrides
  ): Promise<[BigNumber, string] & { apr: BigNumber; protocol: string }>;

  getLendTXData(
    _underlying: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _tokenHolder: PromiseOrValue<string>,
    _protocol: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[string[], string[]] & { targets: string[]; data: string[] }>;

  "getLendTXData(address,uint256,address,bytes32)"(
    _underlying: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _tokenHolder: PromiseOrValue<string>,
    _protocol: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[string[], string[]] & { targets: string[]; data: string[] }>;

  getUnlendTXData(
    _wrapped: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _tokenHolder: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[string[], string[]] & { targets: string[]; data: string[] }>;

  "getUnlendTXData(address,uint256,address)"(
    _wrapped: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _tokenHolder: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[string[], string[]] & { targets: string[]; data: string[] }>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  protocolToLogic(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  "protocolToLogic(bytes32)"(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setProtocolToLogic(
    _protocol: PromiseOrValue<BytesLike>,
    _logic: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setProtocolToLogic(bytes32,address)"(
    _protocol: PromiseOrValue<BytesLike>,
    _logic: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUnderlyingToProtocolWrapped(
    _underlying: PromiseOrValue<string>,
    _protocol: PromiseOrValue<BytesLike>,
    _wrapped: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setUnderlyingToProtocolWrapped(address,bytes32,address)"(
    _underlying: PromiseOrValue<string>,
    _protocol: PromiseOrValue<BytesLike>,
    _wrapped: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWrappedToProtocol(
    _wrapped: PromiseOrValue<string>,
    _protocol: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setWrappedToProtocol(address,bytes32)"(
    _wrapped: PromiseOrValue<string>,
    _protocol: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWrappedToUnderlying(
    _wrapped: PromiseOrValue<string>,
    _underlying: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setWrappedToUnderlying(address,address)"(
    _wrapped: PromiseOrValue<string>,
    _underlying: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  underlyingToProtocolWrapped(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  "underlyingToProtocolWrapped(address,bytes32)"(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  wrappedToProtocol(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  "wrappedToProtocol(address)"(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  wrappedToUnderlying(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  "wrappedToUnderlying(address)"(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    getBestApr(
      _underlying: PromiseOrValue<string>,
      _protocols: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { apr: BigNumber; protocol: string }>;

    "getBestApr(address,bytes32[])"(
      _underlying: PromiseOrValue<string>,
      _protocols: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { apr: BigNumber; protocol: string }>;

    getLendTXData(
      _underlying: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _tokenHolder: PromiseOrValue<string>,
      _protocol: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string[], string[]] & { targets: string[]; data: string[] }>;

    "getLendTXData(address,uint256,address,bytes32)"(
      _underlying: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _tokenHolder: PromiseOrValue<string>,
      _protocol: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string[], string[]] & { targets: string[]; data: string[] }>;

    getUnlendTXData(
      _wrapped: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[], string[]] & { targets: string[]; data: string[] }>;

    "getUnlendTXData(address,uint256,address)"(
      _wrapped: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[], string[]] & { targets: string[]; data: string[] }>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    protocolToLogic(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    "protocolToLogic(bytes32)"(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setProtocolToLogic(
      _protocol: PromiseOrValue<BytesLike>,
      _logic: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setProtocolToLogic(bytes32,address)"(
      _protocol: PromiseOrValue<BytesLike>,
      _logic: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setUnderlyingToProtocolWrapped(
      _underlying: PromiseOrValue<string>,
      _protocol: PromiseOrValue<BytesLike>,
      _wrapped: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setUnderlyingToProtocolWrapped(address,bytes32,address)"(
      _underlying: PromiseOrValue<string>,
      _protocol: PromiseOrValue<BytesLike>,
      _wrapped: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setWrappedToProtocol(
      _wrapped: PromiseOrValue<string>,
      _protocol: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setWrappedToProtocol(address,bytes32)"(
      _wrapped: PromiseOrValue<string>,
      _protocol: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setWrappedToUnderlying(
      _wrapped: PromiseOrValue<string>,
      _underlying: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setWrappedToUnderlying(address,address)"(
      _wrapped: PromiseOrValue<string>,
      _underlying: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    underlyingToProtocolWrapped(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    "underlyingToProtocolWrapped(address,bytes32)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    wrappedToProtocol(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    "wrappedToProtocol(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    wrappedToUnderlying(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    "wrappedToUnderlying(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "ProtocolToLogicSet(bytes32,address)"(
      protocol?: PromiseOrValue<BytesLike> | null,
      logic?: PromiseOrValue<string> | null
    ): ProtocolToLogicSetEventFilter;
    ProtocolToLogicSet(
      protocol?: PromiseOrValue<BytesLike> | null,
      logic?: PromiseOrValue<string> | null
    ): ProtocolToLogicSetEventFilter;

    "UnderlyingToProtocolWrappedSet(address,bytes32,address)"(
      underlying?: PromiseOrValue<string> | null,
      protocol?: PromiseOrValue<BytesLike> | null,
      wrapped?: PromiseOrValue<string> | null
    ): UnderlyingToProtocolWrappedSetEventFilter;
    UnderlyingToProtocolWrappedSet(
      underlying?: PromiseOrValue<string> | null,
      protocol?: PromiseOrValue<BytesLike> | null,
      wrapped?: PromiseOrValue<string> | null
    ): UnderlyingToProtocolWrappedSetEventFilter;

    "WrappedToProtocolSet(address,bytes32)"(
      wrapped?: PromiseOrValue<string> | null,
      protocol?: PromiseOrValue<BytesLike> | null
    ): WrappedToProtocolSetEventFilter;
    WrappedToProtocolSet(
      wrapped?: PromiseOrValue<string> | null,
      protocol?: PromiseOrValue<BytesLike> | null
    ): WrappedToProtocolSetEventFilter;

    "WrappedToUnderlyingSet(address,address)"(
      wrapped?: PromiseOrValue<string> | null,
      underlying?: PromiseOrValue<string> | null
    ): WrappedToUnderlyingSetEventFilter;
    WrappedToUnderlyingSet(
      wrapped?: PromiseOrValue<string> | null,
      underlying?: PromiseOrValue<string> | null
    ): WrappedToUnderlyingSetEventFilter;
  };

  estimateGas: {
    getBestApr(
      _underlying: PromiseOrValue<string>,
      _protocols: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBestApr(address,bytes32[])"(
      _underlying: PromiseOrValue<string>,
      _protocols: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLendTXData(
      _underlying: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _tokenHolder: PromiseOrValue<string>,
      _protocol: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLendTXData(address,uint256,address,bytes32)"(
      _underlying: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _tokenHolder: PromiseOrValue<string>,
      _protocol: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnlendTXData(
      _wrapped: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUnlendTXData(address,uint256,address)"(
      _wrapped: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    protocolToLogic(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "protocolToLogic(bytes32)"(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setProtocolToLogic(
      _protocol: PromiseOrValue<BytesLike>,
      _logic: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setProtocolToLogic(bytes32,address)"(
      _protocol: PromiseOrValue<BytesLike>,
      _logic: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUnderlyingToProtocolWrapped(
      _underlying: PromiseOrValue<string>,
      _protocol: PromiseOrValue<BytesLike>,
      _wrapped: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setUnderlyingToProtocolWrapped(address,bytes32,address)"(
      _underlying: PromiseOrValue<string>,
      _protocol: PromiseOrValue<BytesLike>,
      _wrapped: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWrappedToProtocol(
      _wrapped: PromiseOrValue<string>,
      _protocol: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setWrappedToProtocol(address,bytes32)"(
      _wrapped: PromiseOrValue<string>,
      _protocol: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWrappedToUnderlying(
      _wrapped: PromiseOrValue<string>,
      _underlying: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setWrappedToUnderlying(address,address)"(
      _wrapped: PromiseOrValue<string>,
      _underlying: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    underlyingToProtocolWrapped(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "underlyingToProtocolWrapped(address,bytes32)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wrappedToProtocol(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "wrappedToProtocol(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wrappedToUnderlying(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "wrappedToUnderlying(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getBestApr(
      _underlying: PromiseOrValue<string>,
      _protocols: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBestApr(address,bytes32[])"(
      _underlying: PromiseOrValue<string>,
      _protocols: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLendTXData(
      _underlying: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _tokenHolder: PromiseOrValue<string>,
      _protocol: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLendTXData(address,uint256,address,bytes32)"(
      _underlying: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _tokenHolder: PromiseOrValue<string>,
      _protocol: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUnlendTXData(
      _wrapped: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUnlendTXData(address,uint256,address)"(
      _wrapped: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolToLogic(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "protocolToLogic(bytes32)"(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setProtocolToLogic(
      _protocol: PromiseOrValue<BytesLike>,
      _logic: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setProtocolToLogic(bytes32,address)"(
      _protocol: PromiseOrValue<BytesLike>,
      _logic: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUnderlyingToProtocolWrapped(
      _underlying: PromiseOrValue<string>,
      _protocol: PromiseOrValue<BytesLike>,
      _wrapped: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setUnderlyingToProtocolWrapped(address,bytes32,address)"(
      _underlying: PromiseOrValue<string>,
      _protocol: PromiseOrValue<BytesLike>,
      _wrapped: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWrappedToProtocol(
      _wrapped: PromiseOrValue<string>,
      _protocol: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setWrappedToProtocol(address,bytes32)"(
      _wrapped: PromiseOrValue<string>,
      _protocol: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWrappedToUnderlying(
      _wrapped: PromiseOrValue<string>,
      _underlying: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setWrappedToUnderlying(address,address)"(
      _wrapped: PromiseOrValue<string>,
      _underlying: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    underlyingToProtocolWrapped(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "underlyingToProtocolWrapped(address,bytes32)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wrappedToProtocol(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "wrappedToProtocol(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wrappedToUnderlying(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "wrappedToUnderlying(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
