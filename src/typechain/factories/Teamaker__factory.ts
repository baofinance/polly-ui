/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { Teamaker, TeamakerInterface } from "../Teamaker";

const _abi = [
  {
    type: "constructor",
    stateMutability: "nonpayable",
    inputs: [
      {
        type: "address",
        name: "_factory",
        internalType: "address",
      },
      {
        type: "address",
        name: "_bar",
        internalType: "address",
      },
      {
        type: "address",
        name: "_sushi",
        internalType: "address",
      },
      {
        type: "address",
        name: "_weth",
        internalType: "address",
      },
    ],
  },
  {
    type: "event",
    name: "LogBridgeSet",
    inputs: [
      {
        type: "address",
        name: "token",
        internalType: "address",
        indexed: true,
      },
      {
        type: "address",
        name: "bridge",
        internalType: "address",
        indexed: true,
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "LogConvert",
    inputs: [
      {
        type: "address",
        name: "server",
        internalType: "address",
        indexed: true,
      },
      {
        type: "address",
        name: "token0",
        internalType: "address",
        indexed: true,
      },
      {
        type: "address",
        name: "token1",
        internalType: "address",
        indexed: true,
      },
      {
        type: "uint256",
        name: "amount0",
        internalType: "uint256",
        indexed: false,
      },
      {
        type: "uint256",
        name: "amount1",
        internalType: "uint256",
        indexed: false,
      },
      {
        type: "uint256",
        name: "amountSUSHI",
        internalType: "uint256",
        indexed: false,
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "OwnershipTransferred",
    inputs: [
      {
        type: "address",
        name: "previousOwner",
        internalType: "address",
        indexed: true,
      },
      {
        type: "address",
        name: "newOwner",
        internalType: "address",
        indexed: true,
      },
    ],
    anonymous: false,
  },
  {
    type: "function",
    stateMutability: "view",
    outputs: [
      {
        type: "address",
        name: "",
        internalType: "address",
      },
    ],
    name: "bar",
    inputs: [],
  },
  {
    type: "function",
    stateMutability: "view",
    outputs: [
      {
        type: "address",
        name: "bridge",
        internalType: "address",
      },
    ],
    name: "bridgeFor",
    inputs: [
      {
        type: "address",
        name: "token",
        internalType: "address",
      },
    ],
  },
  {
    type: "function",
    stateMutability: "nonpayable",
    outputs: [],
    name: "convert",
    inputs: [
      {
        type: "address",
        name: "token0",
        internalType: "address",
      },
      {
        type: "address",
        name: "token1",
        internalType: "address",
      },
    ],
  },
  {
    type: "function",
    stateMutability: "nonpayable",
    outputs: [],
    name: "convertMultiple",
    inputs: [
      {
        type: "address[]",
        name: "token0",
        internalType: "address[]",
      },
      {
        type: "address[]",
        name: "token1",
        internalType: "address[]",
      },
    ],
  },
  {
    type: "function",
    stateMutability: "view",
    outputs: [
      {
        type: "address",
        name: "",
        internalType: "contract IUniswapV2Factory",
      },
    ],
    name: "factory",
    inputs: [],
  },
  {
    type: "function",
    stateMutability: "view",
    outputs: [
      {
        type: "address",
        name: "",
        internalType: "address",
      },
    ],
    name: "owner",
    inputs: [],
  },
  {
    type: "function",
    stateMutability: "nonpayable",
    outputs: [],
    name: "renounceOwnership",
    inputs: [],
  },
  {
    type: "function",
    stateMutability: "nonpayable",
    outputs: [],
    name: "setBridge",
    inputs: [
      {
        type: "address",
        name: "token",
        internalType: "address",
      },
      {
        type: "address",
        name: "bridge",
        internalType: "address",
      },
    ],
  },
  {
    type: "function",
    stateMutability: "nonpayable",
    outputs: [],
    name: "transferOwnership",
    inputs: [
      {
        type: "address",
        name: "newOwner",
        internalType: "address",
      },
    ],
  },
];

export class Teamaker__factory {
  static readonly abi = _abi;
  static createInterface(): TeamakerInterface {
    return new utils.Interface(_abi) as TeamakerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Teamaker {
    return new Contract(address, _abi, signerOrProvider) as Teamaker;
  }
}
