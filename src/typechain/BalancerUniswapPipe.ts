/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface BalancerUniswapPipeInterface extends utils.Interface {
  functions: {
    "PipeBalancerUniV2(address,uint256,address,address,uint256)": FunctionFragment;
    "PipeUniV2Balancer(address,uint256,address,address,uint256)": FunctionFragment;
    "balancerZapIn()": FunctionFragment;
    "balancerZapOut()": FunctionFragment;
    "inCaseTokengetsStuck(address)": FunctionFragment;
    "isOwner()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setBalancerZapOut(address)": FunctionFragment;
    "setUniswapV2ZapIn(address)": FunctionFragment;
    "setUniswapV2ZapOut(address)": FunctionFragment;
    "setbalancerZapIn(address)": FunctionFragment;
    "stopped()": FunctionFragment;
    "toggleContractActive()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "uniswapV2ZapIn()": FunctionFragment;
    "uniswapV2ZapOut()": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "PipeBalancerUniV2"
      | "PipeBalancerUniV2(address,uint256,address,address,uint256)"
      | "PipeUniV2Balancer"
      | "PipeUniV2Balancer(address,uint256,address,address,uint256)"
      | "balancerZapIn"
      | "balancerZapIn()"
      | "balancerZapOut"
      | "balancerZapOut()"
      | "inCaseTokengetsStuck"
      | "inCaseTokengetsStuck(address)"
      | "isOwner"
      | "isOwner()"
      | "owner"
      | "owner()"
      | "renounceOwnership"
      | "renounceOwnership()"
      | "setBalancerZapOut"
      | "setBalancerZapOut(address)"
      | "setUniswapV2ZapIn"
      | "setUniswapV2ZapIn(address)"
      | "setUniswapV2ZapOut"
      | "setUniswapV2ZapOut(address)"
      | "setbalancerZapIn"
      | "setbalancerZapIn(address)"
      | "stopped"
      | "stopped()"
      | "toggleContractActive"
      | "toggleContractActive()"
      | "transferOwnership"
      | "transferOwnership(address)"
      | "uniswapV2ZapIn"
      | "uniswapV2ZapIn()"
      | "uniswapV2ZapOut"
      | "uniswapV2ZapOut()"
      | "withdraw"
      | "withdraw()"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "PipeBalancerUniV2",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "PipeBalancerUniV2(address,uint256,address,address,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "PipeUniV2Balancer",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "PipeUniV2Balancer(address,uint256,address,address,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "balancerZapIn",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balancerZapIn()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balancerZapOut",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balancerZapOut()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "inCaseTokengetsStuck",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "inCaseTokengetsStuck(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "isOwner", values?: undefined): string;
  encodeFunctionData(functionFragment: "isOwner()", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBalancerZapOut",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBalancerZapOut(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setUniswapV2ZapIn",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setUniswapV2ZapIn(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setUniswapV2ZapOut",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setUniswapV2ZapOut(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setbalancerZapIn",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setbalancerZapIn(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "stopped", values?: undefined): string;
  encodeFunctionData(functionFragment: "stopped()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "toggleContractActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "toggleContractActive()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV2ZapIn",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV2ZapIn()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV2ZapOut",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV2ZapOut()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw()",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "PipeBalancerUniV2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PipeBalancerUniV2(address,uint256,address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PipeUniV2Balancer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PipeUniV2Balancer(address,uint256,address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balancerZapIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balancerZapIn()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balancerZapOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balancerZapOut()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "inCaseTokengetsStuck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "inCaseTokengetsStuck(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOwner()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBalancerZapOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBalancerZapOut(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUniswapV2ZapIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUniswapV2ZapIn(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUniswapV2ZapOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUniswapV2ZapOut(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setbalancerZapIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setbalancerZapIn(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stopped", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stopped()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toggleContractActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleContractActive()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV2ZapIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV2ZapIn()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV2ZapOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV2ZapOut()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw()", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "OwnershipTransferred(address,address)"
  ): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface BalancerUniswapPipe extends BaseContract {
  contractName: "BalancerUniswapPipe";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BalancerUniswapPipeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    PipeBalancerUniV2(
      _FromBalancerPoolAddress: PromiseOrValue<string>,
      _IncomingBPT: PromiseOrValue<BigNumberish>,
      _toUniswapPoolAddress: PromiseOrValue<string>,
      _toWhomToIssue: PromiseOrValue<string>,
      _minUniV2Tokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "PipeBalancerUniV2(address,uint256,address,address,uint256)"(
      _FromBalancerPoolAddress: PromiseOrValue<string>,
      _IncomingBPT: PromiseOrValue<BigNumberish>,
      _toUniswapPoolAddress: PromiseOrValue<string>,
      _toWhomToIssue: PromiseOrValue<string>,
      _minUniV2Tokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    PipeUniV2Balancer(
      _FromUniswapPoolAddress: PromiseOrValue<string>,
      _IncomingLPT: PromiseOrValue<BigNumberish>,
      _ToBalancerPoolAddress: PromiseOrValue<string>,
      _toWhomToIssue: PromiseOrValue<string>,
      _minBPTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "PipeUniV2Balancer(address,uint256,address,address,uint256)"(
      _FromUniswapPoolAddress: PromiseOrValue<string>,
      _IncomingLPT: PromiseOrValue<BigNumberish>,
      _ToBalancerPoolAddress: PromiseOrValue<string>,
      _toWhomToIssue: PromiseOrValue<string>,
      _minBPTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balancerZapIn(overrides?: CallOverrides): Promise<[string]>;

    "balancerZapIn()"(overrides?: CallOverrides): Promise<[string]>;

    balancerZapOut(overrides?: CallOverrides): Promise<[string]>;

    "balancerZapOut()"(overrides?: CallOverrides): Promise<[string]>;

    inCaseTokengetsStuck(
      _TokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "inCaseTokengetsStuck(address)"(
      _TokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isOwner(overrides?: CallOverrides): Promise<[boolean]>;

    "isOwner()"(overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBalancerZapOut(
      _balancerZapOut: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setBalancerZapOut(address)"(
      _balancerZapOut: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUniswapV2ZapIn(
      _uniswapV2ZapIn: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setUniswapV2ZapIn(address)"(
      _uniswapV2ZapIn: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUniswapV2ZapOut(
      _uniswapV2ZapOut: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setUniswapV2ZapOut(address)"(
      _uniswapV2ZapOut: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setbalancerZapIn(
      _balancerZapIn: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setbalancerZapIn(address)"(
      _balancerZapIn: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stopped(overrides?: CallOverrides): Promise<[boolean]>;

    "stopped()"(overrides?: CallOverrides): Promise<[boolean]>;

    toggleContractActive(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "toggleContractActive()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    uniswapV2ZapIn(overrides?: CallOverrides): Promise<[string]>;

    "uniswapV2ZapIn()"(overrides?: CallOverrides): Promise<[string]>;

    uniswapV2ZapOut(overrides?: CallOverrides): Promise<[string]>;

    "uniswapV2ZapOut()"(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "withdraw()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  PipeBalancerUniV2(
    _FromBalancerPoolAddress: PromiseOrValue<string>,
    _IncomingBPT: PromiseOrValue<BigNumberish>,
    _toUniswapPoolAddress: PromiseOrValue<string>,
    _toWhomToIssue: PromiseOrValue<string>,
    _minUniV2Tokens: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "PipeBalancerUniV2(address,uint256,address,address,uint256)"(
    _FromBalancerPoolAddress: PromiseOrValue<string>,
    _IncomingBPT: PromiseOrValue<BigNumberish>,
    _toUniswapPoolAddress: PromiseOrValue<string>,
    _toWhomToIssue: PromiseOrValue<string>,
    _minUniV2Tokens: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  PipeUniV2Balancer(
    _FromUniswapPoolAddress: PromiseOrValue<string>,
    _IncomingLPT: PromiseOrValue<BigNumberish>,
    _ToBalancerPoolAddress: PromiseOrValue<string>,
    _toWhomToIssue: PromiseOrValue<string>,
    _minBPTokens: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "PipeUniV2Balancer(address,uint256,address,address,uint256)"(
    _FromUniswapPoolAddress: PromiseOrValue<string>,
    _IncomingLPT: PromiseOrValue<BigNumberish>,
    _ToBalancerPoolAddress: PromiseOrValue<string>,
    _toWhomToIssue: PromiseOrValue<string>,
    _minBPTokens: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balancerZapIn(overrides?: CallOverrides): Promise<string>;

  "balancerZapIn()"(overrides?: CallOverrides): Promise<string>;

  balancerZapOut(overrides?: CallOverrides): Promise<string>;

  "balancerZapOut()"(overrides?: CallOverrides): Promise<string>;

  inCaseTokengetsStuck(
    _TokenAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "inCaseTokengetsStuck(address)"(
    _TokenAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isOwner(overrides?: CallOverrides): Promise<boolean>;

  "isOwner()"(overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBalancerZapOut(
    _balancerZapOut: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setBalancerZapOut(address)"(
    _balancerZapOut: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUniswapV2ZapIn(
    _uniswapV2ZapIn: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setUniswapV2ZapIn(address)"(
    _uniswapV2ZapIn: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUniswapV2ZapOut(
    _uniswapV2ZapOut: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setUniswapV2ZapOut(address)"(
    _uniswapV2ZapOut: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setbalancerZapIn(
    _balancerZapIn: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setbalancerZapIn(address)"(
    _balancerZapIn: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stopped(overrides?: CallOverrides): Promise<boolean>;

  "stopped()"(overrides?: CallOverrides): Promise<boolean>;

  toggleContractActive(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "toggleContractActive()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  uniswapV2ZapIn(overrides?: CallOverrides): Promise<string>;

  "uniswapV2ZapIn()"(overrides?: CallOverrides): Promise<string>;

  uniswapV2ZapOut(overrides?: CallOverrides): Promise<string>;

  "uniswapV2ZapOut()"(overrides?: CallOverrides): Promise<string>;

  withdraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "withdraw()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    PipeBalancerUniV2(
      _FromBalancerPoolAddress: PromiseOrValue<string>,
      _IncomingBPT: PromiseOrValue<BigNumberish>,
      _toUniswapPoolAddress: PromiseOrValue<string>,
      _toWhomToIssue: PromiseOrValue<string>,
      _minUniV2Tokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "PipeBalancerUniV2(address,uint256,address,address,uint256)"(
      _FromBalancerPoolAddress: PromiseOrValue<string>,
      _IncomingBPT: PromiseOrValue<BigNumberish>,
      _toUniswapPoolAddress: PromiseOrValue<string>,
      _toWhomToIssue: PromiseOrValue<string>,
      _minUniV2Tokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    PipeUniV2Balancer(
      _FromUniswapPoolAddress: PromiseOrValue<string>,
      _IncomingLPT: PromiseOrValue<BigNumberish>,
      _ToBalancerPoolAddress: PromiseOrValue<string>,
      _toWhomToIssue: PromiseOrValue<string>,
      _minBPTokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "PipeUniV2Balancer(address,uint256,address,address,uint256)"(
      _FromUniswapPoolAddress: PromiseOrValue<string>,
      _IncomingLPT: PromiseOrValue<BigNumberish>,
      _ToBalancerPoolAddress: PromiseOrValue<string>,
      _toWhomToIssue: PromiseOrValue<string>,
      _minBPTokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balancerZapIn(overrides?: CallOverrides): Promise<string>;

    "balancerZapIn()"(overrides?: CallOverrides): Promise<string>;

    balancerZapOut(overrides?: CallOverrides): Promise<string>;

    "balancerZapOut()"(overrides?: CallOverrides): Promise<string>;

    inCaseTokengetsStuck(
      _TokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "inCaseTokengetsStuck(address)"(
      _TokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isOwner(overrides?: CallOverrides): Promise<boolean>;

    "isOwner()"(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setBalancerZapOut(
      _balancerZapOut: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setBalancerZapOut(address)"(
      _balancerZapOut: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setUniswapV2ZapIn(
      _uniswapV2ZapIn: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setUniswapV2ZapIn(address)"(
      _uniswapV2ZapIn: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setUniswapV2ZapOut(
      _uniswapV2ZapOut: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setUniswapV2ZapOut(address)"(
      _uniswapV2ZapOut: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setbalancerZapIn(
      _balancerZapIn: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setbalancerZapIn(address)"(
      _balancerZapIn: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    stopped(overrides?: CallOverrides): Promise<boolean>;

    "stopped()"(overrides?: CallOverrides): Promise<boolean>;

    toggleContractActive(overrides?: CallOverrides): Promise<void>;

    "toggleContractActive()"(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    uniswapV2ZapIn(overrides?: CallOverrides): Promise<string>;

    "uniswapV2ZapIn()"(overrides?: CallOverrides): Promise<string>;

    uniswapV2ZapOut(overrides?: CallOverrides): Promise<string>;

    "uniswapV2ZapOut()"(overrides?: CallOverrides): Promise<string>;

    withdraw(overrides?: CallOverrides): Promise<void>;

    "withdraw()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    PipeBalancerUniV2(
      _FromBalancerPoolAddress: PromiseOrValue<string>,
      _IncomingBPT: PromiseOrValue<BigNumberish>,
      _toUniswapPoolAddress: PromiseOrValue<string>,
      _toWhomToIssue: PromiseOrValue<string>,
      _minUniV2Tokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "PipeBalancerUniV2(address,uint256,address,address,uint256)"(
      _FromBalancerPoolAddress: PromiseOrValue<string>,
      _IncomingBPT: PromiseOrValue<BigNumberish>,
      _toUniswapPoolAddress: PromiseOrValue<string>,
      _toWhomToIssue: PromiseOrValue<string>,
      _minUniV2Tokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    PipeUniV2Balancer(
      _FromUniswapPoolAddress: PromiseOrValue<string>,
      _IncomingLPT: PromiseOrValue<BigNumberish>,
      _ToBalancerPoolAddress: PromiseOrValue<string>,
      _toWhomToIssue: PromiseOrValue<string>,
      _minBPTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "PipeUniV2Balancer(address,uint256,address,address,uint256)"(
      _FromUniswapPoolAddress: PromiseOrValue<string>,
      _IncomingLPT: PromiseOrValue<BigNumberish>,
      _ToBalancerPoolAddress: PromiseOrValue<string>,
      _toWhomToIssue: PromiseOrValue<string>,
      _minBPTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balancerZapIn(overrides?: CallOverrides): Promise<BigNumber>;

    "balancerZapIn()"(overrides?: CallOverrides): Promise<BigNumber>;

    balancerZapOut(overrides?: CallOverrides): Promise<BigNumber>;

    "balancerZapOut()"(overrides?: CallOverrides): Promise<BigNumber>;

    inCaseTokengetsStuck(
      _TokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "inCaseTokengetsStuck(address)"(
      _TokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "isOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBalancerZapOut(
      _balancerZapOut: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setBalancerZapOut(address)"(
      _balancerZapOut: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUniswapV2ZapIn(
      _uniswapV2ZapIn: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setUniswapV2ZapIn(address)"(
      _uniswapV2ZapIn: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUniswapV2ZapOut(
      _uniswapV2ZapOut: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setUniswapV2ZapOut(address)"(
      _uniswapV2ZapOut: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setbalancerZapIn(
      _balancerZapIn: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setbalancerZapIn(address)"(
      _balancerZapIn: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stopped(overrides?: CallOverrides): Promise<BigNumber>;

    "stopped()"(overrides?: CallOverrides): Promise<BigNumber>;

    toggleContractActive(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "toggleContractActive()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    uniswapV2ZapIn(overrides?: CallOverrides): Promise<BigNumber>;

    "uniswapV2ZapIn()"(overrides?: CallOverrides): Promise<BigNumber>;

    uniswapV2ZapOut(overrides?: CallOverrides): Promise<BigNumber>;

    "uniswapV2ZapOut()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "withdraw()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    PipeBalancerUniV2(
      _FromBalancerPoolAddress: PromiseOrValue<string>,
      _IncomingBPT: PromiseOrValue<BigNumberish>,
      _toUniswapPoolAddress: PromiseOrValue<string>,
      _toWhomToIssue: PromiseOrValue<string>,
      _minUniV2Tokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "PipeBalancerUniV2(address,uint256,address,address,uint256)"(
      _FromBalancerPoolAddress: PromiseOrValue<string>,
      _IncomingBPT: PromiseOrValue<BigNumberish>,
      _toUniswapPoolAddress: PromiseOrValue<string>,
      _toWhomToIssue: PromiseOrValue<string>,
      _minUniV2Tokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    PipeUniV2Balancer(
      _FromUniswapPoolAddress: PromiseOrValue<string>,
      _IncomingLPT: PromiseOrValue<BigNumberish>,
      _ToBalancerPoolAddress: PromiseOrValue<string>,
      _toWhomToIssue: PromiseOrValue<string>,
      _minBPTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "PipeUniV2Balancer(address,uint256,address,address,uint256)"(
      _FromUniswapPoolAddress: PromiseOrValue<string>,
      _IncomingLPT: PromiseOrValue<BigNumberish>,
      _ToBalancerPoolAddress: PromiseOrValue<string>,
      _toWhomToIssue: PromiseOrValue<string>,
      _minBPTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balancerZapIn(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "balancerZapIn()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balancerZapOut(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "balancerZapOut()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    inCaseTokengetsStuck(
      _TokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "inCaseTokengetsStuck(address)"(
      _TokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBalancerZapOut(
      _balancerZapOut: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setBalancerZapOut(address)"(
      _balancerZapOut: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUniswapV2ZapIn(
      _uniswapV2ZapIn: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setUniswapV2ZapIn(address)"(
      _uniswapV2ZapIn: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUniswapV2ZapOut(
      _uniswapV2ZapOut: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setUniswapV2ZapOut(address)"(
      _uniswapV2ZapOut: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setbalancerZapIn(
      _balancerZapIn: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setbalancerZapIn(address)"(
      _balancerZapIn: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stopped(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stopped()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    toggleContractActive(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "toggleContractActive()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    uniswapV2ZapIn(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "uniswapV2ZapIn()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uniswapV2ZapOut(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "uniswapV2ZapOut()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "withdraw()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
